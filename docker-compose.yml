version: '3.8'

services:
  # 用户服务
  user-api:
    build:
      context: .
      dockerfile: app/user/api/Dockerfile
    container_name: user-api
    ports:
      - "8888:8888"
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  user-rpc:
    build:
      context: .
      dockerfile: app/user/rpc/Dockerfile
    container_name: user-rpc
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  # 群组服务
  group-api:
    build:
      context: .
      dockerfile: app/group/api/Dockerfile
    container_name: group-api
    ports:
      - "8889:8889"
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  group-rpc:
    build:
      context: .
      dockerfile: app/group/rpc/Dockerfile
    container_name: group-rpc
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  # 消息服务
  msg-api:
    build:
      context: .
      dockerfile: app/msg/api/Dockerfile
    container_name: msg-api
    ports:
      - "8890:8890"
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  msg-rpc:
    build:
      context: .
      dockerfile: app/msg/rpc/Dockerfile
    container_name: msg-rpc
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_BROKERS=kafka0:9093,kafka1:9094
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - mysql
      - redis
      - kafka0
      - kafka1
      - jaeger
    networks:
      - im-network
    restart: always

  # 基础设施服务
  mysql:
    image: mysql:8.0.26
    container_name: mysql_im
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=im_message
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1
    networks:
      - im-network
    restart: always

  redis:
    image: redis:6.2.5
    container_name: redis_im
    ports:
      - "6379:6379"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    networks:
      - im-network
    restart: always

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "2181:2181"
    networks:
      - im-network
    restart: always

  kafka0:
    image: wurstmeister/kafka
    container_name: kafka0
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka0:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - TZ=Asia/Shanghai
    volumes:
      - kafka0_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - im-network
    restart: always

  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    ports:
      - "9094:9094"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9094
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - TZ=Asia/Shanghai
    volumes:
      - kafka1_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - im-network
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=memory
      - LOG_LEVEL=debug
    networks:
      - im-network
    restart: always

  # 监控和日志
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - im-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - im-network
    restart: always

networks:
  im-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  kafka0_data:
  kafka1_data:
  prometheus_data:
  grafana_data: